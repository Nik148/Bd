# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'client_v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

host = "127.0.0.1"
user = "postgres"
password = "123"
db_name = "Homework"
from insert import InsertWindow, Ui_InsertWindow
from delete import DeleteWindow, Ui_DeleteWindow
from search import SearchWindow, Ui_SearchWindow
from PyQt5 import QtCore, QtGui, QtWidgets
from Connect import DataBase
import sys

class Window(QtWidgets.QMainWindow):
        def __init__(self):
            super().__init__()

class Ui_MainWindow(Window):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1050, 650)
        MainWindow.setMaximumSize(QtCore.QSize(1050, 650))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)
        self.db = DataBase(host, user, password, db_name)
        self.main = self.db.showTable()
        self.vertical = []
        for i in self.main:
            self.vertical.append(str(i[0]))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.bt_insert = QtWidgets.QPushButton(self.centralwidget)
        self.bt_insert.setGeometry(QtCore.QRect(880, 120, 151, 41))
        self.bt_insert.setObjectName("bt_insert")
        self.bt_change = QtWidgets.QPushButton(self.centralwidget)
        self.bt_change.setGeometry(QtCore.QRect(880, 180, 151, 41))
        self.bt_change.setObjectName("bt_change")
        self.bt_delete = QtWidgets.QPushButton(self.centralwidget)
        self.bt_delete.setGeometry(QtCore.QRect(880, 240, 151, 41))
        self.bt_delete.setObjectName("bt_delete")
        self.bt_update = QtWidgets.QPushButton(self.centralwidget)
        self.bt_update.setGeometry(QtCore.QRect(880, 300, 151, 41))
        self.bt_update.setObjectName("bt_update")
        self.bt_search = QtWidgets.QPushButton(self.centralwidget)
        self.bt_search.setGeometry(QtCore.QRect(880, 60, 151, 41))
        self.bt_search.setObjectName("bt_search")
        #Таблица
        self.table = QtWidgets.QTableWidget(self.centralwidget)
        self.table.setGeometry(QtCore.QRect(10, 50, 850, 441))
        self.table.setObjectName("table")
        self.table.setColumnCount(8)
        self.table.setRowCount(len(self.vertical))
        self.colomn_names = ['fam', 'name', 'otez', 'street', 'dom', 'dom_k', 'flat', 'phone']
        self.table.setHorizontalHeaderLabels(self.colomn_names)
        self.table.setVerticalHeaderLabels(self.vertical)
        MainWindow.setCentralWidget(self.centralwidget)
        self.fill()
        self.table.resizeColumnsToContents()
        # rer = self.table.item(1, 2) # Возращает объект QTableItemWidget
        # print(rer.data(0))# Выводит данные из объекта
        # self.bt_search = QtWidgets.QPushButton(self.centralwidget)
        # self.bt_search.setGeometry(QtCore.QRect(239, 7, 100, 27))
        # self.bt_search.setObjectName("bt_search")
        # self.lineSearch = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineSearch.setGeometry(QtCore.QRect(140, 8, 100, 25))
        # self.search_combobox = QtWidgets.QComboBox(self.centralwidget)
        # self.search_combobox.setGeometry(QtCore.QRect(40, 8, 100, 25))
        # self.search_combobox.addItems(self.colomn_names)
        self.table_combobox = QtWidgets.QComboBox(self.centralwidget)
        self.table_combobox.setGeometry(QtCore.QRect(700, 8, 100, 25))
        self.table_name = ['main', 'lastname', 'name', 'otchestvo', 'street']
        self.table_colomn = {
            'lastname': ['f_val', 'f_id'],
            'name': ['n_val', 'n_id'],
            'otchestvo': ['ot_val', 'ot_id'],
            'street': ['st_val', 'st_id']
        }
        self.slovar = {
            "fam": "f_val",
            "name": "n_val",
            "otez":  "ot_val",
            "street": "st_val",
            "dom": "dom",
            "dom_k": "dom_k",
            "flat": "flat",
            "phone": "phone"
        }
        self.table_combobox.addItems(self.table_name)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Поиск
        self.comboBox1 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox1.setGeometry(QtCore.QRect(100, 550, 101, 21))
        self.lineEdit1 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit1.setGeometry(QtCore.QRect(200, 550, 121, 21))
        self.radioButton1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton1.setGeometry(QtCore.QRect(350, 520, 91, 17))
        self.radioButton2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton2.setGeometry(QtCore.QRect(350, 550, 91, 17))        
        self.radioButton3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton3.setGeometry(QtCore.QRect(350, 580, 91, 17))  
        self.rbutton_group1 = QtWidgets.QButtonGroup()
        self.rbutton_group1.addButton(self.radioButton1)
        self.rbutton_group1.addButton(self.radioButton2)
        self.rbutton_group1.addButton(self.radioButton3)
        self.radioButton3.setChecked(True)

        self.comboBox2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox2.setGeometry(QtCore.QRect(430, 550, 101, 21))
        self.lineEdit2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit2.setGeometry(QtCore.QRect(530, 550, 121, 21))
        self.radioButton4 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton4.setGeometry(QtCore.QRect(680, 520, 91, 17))
        self.radioButton5 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton5.setGeometry(QtCore.QRect(680, 550, 91, 17))        
        self.radioButton6 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton6.setGeometry(QtCore.QRect(680, 580, 91, 17))  
        self.rbutton_group2 = QtWidgets.QButtonGroup()
        self.rbutton_group2.addButton(self.radioButton4)
        self.rbutton_group2.addButton(self.radioButton5)
        self.rbutton_group2.addButton(self.radioButton6)
        self.radioButton6.setChecked(True)

        self.comboBox3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox3.setGeometry(QtCore.QRect(760, 550, 101, 21))
        self.lineEdit3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit3.setGeometry(QtCore.QRect(860, 550, 121, 21))

        self.comboBox1.addItems(self.colomn_names)
        self.comboBox2.addItems(self.colomn_names)        
        self.comboBox3.addItems(self.colomn_names)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.add_function()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Client app"))
        self.bt_insert.setText(_translate("MainWindow", "Добавить"))
        self.bt_change.setText(_translate("MainWindow", "Изменить"))
        self.bt_delete.setText(_translate("MainWindow", "Удалить"))
        self.bt_update.setText(_translate("MainWindow", "Обновить"))
        self.bt_search.setText(_translate("MainWindow", "Поиск"))
        self.radioButton1.setText(_translate("MainWindow", "OR"))
        self.radioButton2.setText(_translate("MainWindow", "AND"))
        self.radioButton3.setText(_translate("MainWindow", "NONE"))
        self.radioButton4.setText(_translate("MainWindow", "OR"))
        self.radioButton5.setText(_translate("MainWindow", "AND"))
        self.radioButton6.setText(_translate("MainWindow", "NONE"))         

    def add_function(self):
        #При нажатии на кнопку "Изменить" возвращается данные ячейки
        self.bt_change.clicked.connect(lambda: self.change())
        self.bt_insert.clicked.connect(lambda: self.insert())
        self.bt_delete.clicked.connect(lambda: self.delete())
        self.bt_update.clicked.connect(lambda: self.update())
        self.bt_search.clicked.connect(lambda: self.search())

    def change(self):
        # selectedItems() возвращает список отмеченных пользователем ячейек
        try:
            item = self.table.selectedItems()[0]
            item_colomn = item.column()
            if item_colomn < 4:
                print(item.data(0), self.colomn_names[item_colomn], self.vertical[item.row()] )
                self.db.update_parent(item.data(0), self.colomn_names[item_colomn], self.vertical[item.row()])
            else:
                self.db.update_main(item.data(0), self.colomn_names[item_colomn], self.vertical[item.row()])
        except IndexError:
            pass

    def insert(self):
        self.insertWindow = InsertWindow()
        self.insertWindow.show()

    def delete(self):
        try:
            if self.table_combobox.currentText() == 'main':    
                row = self.table.selectedItems()[0].row()
                self.db.delete(self.vertical[row])
                # self.deleteWindow = DeleteWindow()
                # self.deleteWindow.show()
            else:
                row = self.table.selectedItems()[0].row()
                print(self.table_combobox.currentText(), self.table_colomn[self.table_combobox.currentText()][1], self.vertical[row])
                self.db.deleteParent(self.table_combobox.currentText(), self.table_colomn[self.table_combobox.currentText()][1], self.vertical[row])
        except IndexError:
            pass
        except Exception:
            pass


    def update(self):
        if self.table_combobox.currentText() == 'main':
            self.main = self.db.showTable()
            self.table.setColumnCount(8)
            self.vertical = []
            for i in self.main:
                self.vertical.append(str(i[0]))     
            self.table.setRowCount(len(self.vertical))
            self.table.setVerticalHeaderLabels(self.vertical)
            self.table.setHorizontalHeaderLabels(self.colomn_names)
            self.fill()
            self.table.resizeColumnsToContents()
        else:
            # self.table.clear()
            self.table.setColumnCount(1)
            self.main = self.db.showParent(self.table_combobox.currentText())
            self.vertical = []
            for i in self.main:
                self.vertical.append(str(i[0]))
            self.table.setRowCount(len(self.vertical))
            self.table.setVerticalHeaderLabels(self.vertical)
            self.table.setHorizontalHeaderLabels(self.table_colomn[self.table_combobox.currentText()])
            row = 0
            for item in self.main:
                for colomn in range(0, 1):
                    self.table.setItem(row, colomn, QtWidgets.QTableWidgetItem(str(item[colomn+1])))# +1 чтобы пропустить столбец "id"
                row += 1
            
    
    def search(self):
        # None и None
        if self.rbutton_group1.checkedId() == -4 and self.rbutton_group2.checkedId() == -4:
            self.main = self.db.show1(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text())
        # OR и None
        elif self.rbutton_group1.checkedId() == -2 and self.rbutton_group2.checkedId() == -4:
            self.main = self.db.showOr1(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text(), self.slovar[self.comboBox2.currentText()], self.lineEdit2.text())
        # AND и None
        elif self.rbutton_group1.checkedId() == -3 and self.rbutton_group2.checkedId() == -4:
            self.main = self.db.showAnd1(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text(), self.slovar[self.comboBox2.currentText()], self.lineEdit2.text())
        # OR и OR
        elif self.rbutton_group1.checkedId() == -2 and self.rbutton_group2.checkedId() == -2:
            self.main = self.db.showOr2(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text(), self.slovar[self.comboBox2.currentText()], self.lineEdit2.text(), self.slovar[self.comboBox3.currentText()], self.lineEdit3.text())
        # AND и AND
        elif self.rbutton_group1.checkedId() == -3 and self.rbutton_group2.checkedId() == -3:
            self.main = self.db.showAnd2(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text(), self.slovar[self.comboBox2.currentText()], self.lineEdit2.text(), self.slovar[self.comboBox3.currentText()], self.lineEdit3.text())        
        # OR и AND
        elif self.rbutton_group1.checkedId() == -2 and self.rbutton_group2.checkedId() == -3:
            self.main = self.db.showOr1And1(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text(), self.slovar[self.comboBox2.currentText()], self.lineEdit2.text(), self.slovar[self.comboBox3.currentText()], self.lineEdit3.text())         
        # AND и OR
        elif self.rbutton_group1.checkedId() == -3 and self.rbutton_group2.checkedId() == -2:
            self.main = self.dbshowAnd1Or1(self.slovar[self.comboBox1.currentText()], self.lineEdit1.text(), self.slovar[self.comboBox2.currentText()], self.lineEdit2.text(), self.slovar[self.comboBox3.currentText()], self.lineEdit3.text()) 

        self.table.setColumnCount(8)
        self.vertical = []
        for i in self.main:
            self.vertical.append(str(i[0]))     
        self.table.setRowCount(len(self.vertical))
        self.table.setVerticalHeaderLabels(self.vertical)
        self.table.setHorizontalHeaderLabels(self.colomn_names)
        self.fill()
        self.table.resizeColumnsToContents()


    def fill(self):
        #Функция заполняет таблицу значениями:
        row = 0
        for item in self.main:
            for colomn in range(0, 8):
                self.table.setItem(row, colomn, QtWidgets.QTableWidgetItem(str(item[colomn+1])))# +1 чтобы пропустить столбец "id"
            row += 1

    # def change(self):
    #     row = 0
    #     for item in self.main:
    #         for colomn in range(0, 8):
    #             self.table.cellChanged(row, colomn)
    #         row += 1





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
